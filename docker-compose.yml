version: "2"

networks:
  flaskstack-network:

volumes:
  datavolume:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./datavolume
  dbvolume:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./dbvolume

services:


  # ---- POSTGRES ----
  flaskstack-postgres:
    container_name: flaskstack-postgres
    build: ./postgres
    image: flaskstack-postgres
    networks:
      - flaskstack-network
    ports:
      - "45432:5432"
    volumes:
      - "dbvolume:/bitnami/postgresql"
    environment:
      - "ALLOW_EMPTY_PASSWORD=yes"


  # ---- FLASK ----
  flaskstack-flask:
    container_name: flaskstack-flask
    build: ./flask
    depends_on:
      - flaskstack-postgres
    image: flaskstack-flask
    networks:
      - flaskstack-network
    environment:
      - "FLASK_APP=nucleus.py"
      - "FLASK_DEBUG=1"
    ports:
      - "48080:5000"
    volumes:
      - "datavolume:/app/datavolume"
    #
    # wait-for-it.sh must target the internal port number, not the external
    command: [
      "/app/wait-for-it.sh",
      "--host=flaskstack-postgres",
      "--port=5432",
      "--timeout=20",
      "--",
      "python",
      "-V",
    ]
#
# Some misc entrypoint options and notes:
#
#
#      "flask",
#      "--app",
#      "nucleus",
#      "--debug",
#      "run",
#      "-h",
#      "0.0.0.0",
#      "-p",
#      "5000",
#
#
# flask run -h localhost -p 3000
#
# flask --app nucleus --debug run
#
# Reload would only be useful if we exported/mapped the source where we edit it into the running container.
#      "--reload",
#
#      "--host=0.0.0.0",
#      "--port=48080",
#
#      "/opt/bitnami/python/bin/python",
#      "-V",
#

###############################################################################


# For production deployment on AWS:

#    SETUP: To use a full repository URL image name, customize a URL like the one here:
#    image: <YOUR-AWS-USER-ID-NUMBER>.dkr.ecr.us-west-2.amazonaws.com/<YOUR-AWS-REPO-NAME>:flaskstack-flask
#
# CONSIDER FOR ALL CONTAINERS:
#    restart: unless-stopped

#
# Cannot connect to Flask from outside the container unless you tell Flask to listen on 0.0.0.0. This issue has been
# seen before. The default (which does not work for me, at least on macOS, is localhost or 127.0.0.1. Neither work
# on macOS. I would have to test to see if this is also the case on Linux. I suspect the issue is the same when
# the host OS of the docker engine is Linux. It could just be a basic networking issue. 127.0.0.1/localhost are the
# loopback address, not intended for external access. Running locally a browser probably COULD access localhost,
# actually I know it can. It is because this is running in a container and hence it is a separate logical host.

